https://www.javascripttutorial.net/javascript-callback/#:~:text=In%20JavaScript%2C%20a%20callback%20is,argument%20to%20be%20executed%20later.&text=When%20you%20pass%20a%20callback,name%20without%20the%20parentheses%20()%20.


Q) What is callback function:
---------------------------------

>> 
1) callback function are the function which are executed once the other function are executed.
2) Function which are passed as argument to a function are called as callback function.

callback are used in 2 ways:
-----------------------------
1) synchronous
2) Asynchronous

1) synchronous callback function:
---------------------------------------
let numbers = [1, 2, 4, 7, 3, 5, 6];
let oddNumbers = numbers.filter(function(number) {
    return number % 2;
});
console.log(oddNumbers); // [ 1, 7, 3, 5 ]

In the above callback is synchronous function.

2) Asynchronous callback function:
-------------------------------------

Asynchronicity means that if javascript has to wait for operation to complete.It will execute rest of code while waiting.

This achieved by single threaded and event loop.

function download (url){
    setTimeout(() => {
        console.log('Downloading url ' + url);    
    }, 3*1000);
}

function process(picture){
    console.log('processing ' + picture);
}

let url = 'https://www.javascripttutorial.net/foo.jg';

download(url);
process(url);

/**
 * Output:
 * processing https://www.javascripttutorial.net/foo.jg
   Downloading url https://www.javascripttutorial.net/foo.jg


   In these download is called first and process is called after wards.But processing is consoled first before download which is not proper.

 */


   function download1 (url,callback){
    setTimeout(() => {
        console.log('Downloading url ' + url);   
        callback(url); 
    }, 3*1000);
}

function process1(picture){
    console.log('processing ' + picture);
}

let url1 = 'https://www.javascripttutorial.net/foo.jg';

download1(url1,process1);

/**
 * Now you have passed the callback function after downloading a processing  is called.
 */


